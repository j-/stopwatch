{"version":3,"sources":["nosleep.ts","use-time.ts","components/Time.tsx","constants.ts","store/selector.ts","store/actions.ts","store/index.ts","format-diff.ts","components/Stopwatch.tsx","components/SplitClock.tsx","components/App.tsx","register-service-worker.ts","index.tsx"],"names":["nosleep","require","useTime","interval","arguments","length","undefined","_React$useState","React","Date","now","_React$useState2","Object","slicedToArray","time","setTime","clock","setInterval","clearInterval","Time","react","className","formatDate","useSelector","useSelectorRedux","toggleTimer","dispatch","getState","state","isStopwatchTicking","type","data","stopTimer","startTimer","DEFAULT_STATE","started","stopped","store","action","isActionStartTimer","isStopwatchUninitialized","objectSpread","isActionStopTimer","isActionRestartTimer","getStopwatchFormatted","diff","s","Math","min","floor","ss","String","padStart","mm","hh","concat","formatDiff","max","round","getStopwatchMilliseconds","getStartStopButtonText","Stopwatch","useDispatch","formattedCount","buttonText","onClick","e","preventDefault","SplitClock","src_components_Time","src_components_Stopwatch","App","src_components_SplitClock","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","persistState","render","es","src_components_App","document","getElementById","enable","URL","process","toString","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.64803198.chunk.js","sourcesContent":["const NoSleep = require('nosleep.js');\r\n\r\nconst nosleep = new NoSleep();\r\n\r\nexport const enable = () => {\r\n  nosleep.enable();\r\n  return () => nosleep.disable();\r\n};\r\n","import * as React from 'react';\r\n\r\nconst DEFAULT_INTERVAL = 1000;\r\n\r\nexport const useTime = (interval: number = DEFAULT_INTERVAL) => {\r\n  const [time, setTime] = React.useState(Date.now());\r\n  React.useEffect(() => {\r\n    const clock = setInterval(() => setTime(Date.now()), interval);\r\n    return () => clearInterval(clock);\r\n  });\r\n  return time;\r\n};\r\n","import * as React from 'react';\r\nimport formatDate from 'date-fns/format';\r\nimport { TIME_INTERVAL, TIME_FORMAT } from '../constants';\r\nimport { useTime } from '../use-time';\r\nimport './Time.css';\r\n\r\nconst Time: React.FC = () => {\r\n  const time = useTime(TIME_INTERVAL);\r\n\r\n  return (\r\n    <div className=\"Time\">\r\n      {formatDate(time, TIME_FORMAT)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Time;\r\n","export const TIME_FORMAT = 'h:mm';\r\n\r\nexport const TIME_INTERVAL = 1000;\r\n\r\nexport const STOPWATCH_INTERVAL = 150;\r\n\r\nexport const MAX_VALUE_SECONDS = 36000 - 1;\r\n","import { useSelector as useSelectorRedux, TypedUseSelectorHook } from 'react-redux';\r\nimport { RootReducerState } from '.';\r\n\r\nexport const useSelector: TypedUseSelectorHook<RootReducerState> = useSelectorRedux;\r\n","import { Action } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { RootReducerState, isStopwatchTicking } from '.';\r\n\r\n/* Start timer */\r\n\r\nexport const ACTION_START_TIMER = 'START_TIMER';\r\n\r\nexport interface ActionStartTimer extends Action<typeof ACTION_START_TIMER> {\r\n  data: {\r\n    time: number;\r\n  };\r\n}\r\n\r\nexport const isActionStartTimer = (action: Action): action is ActionStartTimer => (\r\n  action.type === ACTION_START_TIMER\r\n);\r\n\r\nexport const startTimer = (time: number = Date.now()): ActionStartTimer => ({\r\n  type: ACTION_START_TIMER,\r\n  data: {\r\n    time,\r\n  },\r\n});\r\n\r\n/* Stop timer */\r\n\r\nexport const ACTION_STOP_TIMER = 'STOP_TIMER';\r\n\r\nexport interface ActionStopTimer extends Action<typeof ACTION_STOP_TIMER> {\r\n  data: {\r\n    time: number;\r\n  };\r\n}\r\n\r\nexport const isActionStopTimer = (action: Action): action is ActionStopTimer => (\r\n  action.type === ACTION_STOP_TIMER\r\n);\r\n\r\nexport const stopTimer = (time: number = Date.now()): ActionStopTimer => ({\r\n  type: ACTION_STOP_TIMER,\r\n  data: {\r\n    time,\r\n  },\r\n});\r\n\r\n/* Toggle timer */\r\n\r\nexport const toggleTimer = (time: number = Date.now()): ThunkAction<void, RootReducerState, void, ActionStartTimer | ActionStopTimer> => (dispatch, getState) => {\r\n  const state = getState();\r\n  const isTicking = isStopwatchTicking(state);\r\n  if (isTicking) {\r\n    dispatch(stopTimer(time));\r\n  } else {\r\n    dispatch(startTimer(time));\r\n  }\r\n};\r\n\r\n/* Restart timer */\r\n\r\nexport const ACTION_RESTART_TIMER = 'RESTART_TIMER';\r\n\r\nexport interface ActionRestartTimer extends Action<typeof ACTION_RESTART_TIMER> {}\r\n\r\nexport const isActionRestartTimer = (action: Action): action is ActionRestartTimer => (\r\n  action.type === ACTION_RESTART_TIMER\r\n);\r\n\r\nexport const restartTimer = (): ActionRestartTimer => ({\r\n  type: ACTION_RESTART_TIMER,\r\n});\r\n","import { Reducer } from 'redux';\r\nimport { formatDiff } from '../format-diff';\r\nimport { isActionStartTimer, isActionStopTimer, isActionRestartTimer } from './actions';\r\n\r\nexport interface RootReducerState {\r\n  started: number | null;\r\n  stopped: number | null;\r\n}\r\n\r\nconst DEFAULT_STATE: RootReducerState = {\r\n  started: null,\r\n  stopped: null,\r\n};\r\n\r\nconst reducer: Reducer<RootReducerState> = (state = DEFAULT_STATE, action) => {\r\n  if (isActionStartTimer(action)) {\r\n    if (isStopwatchUninitialized(state)) {\r\n      return {\r\n        ...state,\r\n        started: action.data.time,\r\n        stopped: null,\r\n      };\r\n    } else {\r\n      return {\r\n        ...state,\r\n        started: action.data.time - (state.stopped! - state.started!),\r\n        stopped: null,\r\n      };\r\n    }\r\n  }\r\n\r\n  if (isActionStopTimer(action)) {\r\n    return {\r\n      ...state,\r\n      stopped: action.data.time,\r\n    };\r\n  }\r\n\r\n  if (isActionRestartTimer(action)) {\r\n    return {\r\n      ...state,\r\n      started: null,\r\n      stopped: null,\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nexport default reducer;\r\n\r\nexport const isStopwatchUninitialized = (state: RootReducerState) => (\r\n  state.stopped === null && state.started !== null\r\n);\r\n\r\nexport const isStopwatchTicking = (state: RootReducerState) => (\r\n  state.stopped === null && state.started !== null\r\n);\r\n\r\nexport const isStopwatchPaused = (state: RootReducerState) => (\r\n  state.stopped !== null && state.started !== null\r\n);\r\n\r\nexport const getStopwatchMilliseconds = (state: RootReducerState, now: number) => (\r\n  state.started === null ?\r\n    0 :\r\n  state.stopped === null ?\r\n    Math.max(0, Math.round(now - state.started)) :\r\n    Math.max(0, Math.round(state.stopped - state.started))\r\n);\r\n\r\nexport const getStopwatchFormatted = (state: RootReducerState, now: number) => (\r\n  formatDiff(getStopwatchMilliseconds(state, now))\r\n);\r\n\r\nexport const getStartStopButtonText = (state: RootReducerState) => (\r\n  isStopwatchTicking(state) ? 'Stop' : 'Start'\r\n);\r\n","import { MAX_VALUE_SECONDS } from './constants';\r\n\r\nexport const formatDiff = (diff: number): string => {\r\n  const s = Math.min(Math.floor(diff / 1000), MAX_VALUE_SECONDS);\r\n  const ss = String(s % 60).padStart(2, '0');\r\n  if (s >= 3600) {\r\n    const mm = String(Math.floor(s / 60 % 60)).padStart(2, '0');\r\n    const hh = String(Math.floor(s / 60 / 60));\r\n    return `${hh}:${mm}:${ss}`;\r\n  } else {\r\n    const mm = String(Math.floor(s / 60 % 60));\r\n    return `${mm}:${ss}`;\r\n  }\r\n};\r\n","import * as React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from '../store/selector';\r\nimport { getStopwatchFormatted, getStartStopButtonText } from '../store';\r\nimport { toggleTimer, restartTimer } from '../store/actions';\r\nimport { STOPWATCH_INTERVAL } from '../constants';\r\nimport { useTime } from '../use-time';\r\nimport './Stopwatch.css';\r\n\r\nconst Stopwatch: React.FC = () => {\r\n  const time = useTime(STOPWATCH_INTERVAL);\r\n  const dispatch = useDispatch();\r\n  const formattedCount = useSelector((state) => getStopwatchFormatted(state, time));\r\n  const buttonText = useSelector(getStartStopButtonText);\r\n\r\n  const onClickStartStop: React.MouseEventHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(toggleTimer());\r\n  };\r\n\r\n  const onClickReset: React.MouseEventHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(restartTimer());\r\n  };\r\n\r\n  return (\r\n    <div className=\"Stopwatch\">\r\n      <div className=\"Stopwatch-count\">\r\n        {formattedCount}\r\n      </div>\r\n      <div className=\"Stopwatch-actions\">\r\n        <button type=\"button\" onClick={onClickStartStop}>\r\n          {buttonText}\r\n        </button>\r\n        <button type=\"button\" onClick={onClickReset}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stopwatch;\r\n","import * as React from 'react';\r\nimport Time from './Time';\r\nimport Stopwatch from './Stopwatch';\r\nimport './SplitClock.css';\r\n\r\nconst SplitClock: React.FC = () => {\r\n  return (\r\n    <div className=\"SplitClock\">\r\n      <div className=\"SplitClock-time\">\r\n        <Time />\r\n      </div>\r\n      <div className=\"SplitClock-stopwatch\">\r\n        <Stopwatch />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SplitClock;\r\n","import * as React from 'react';\r\nimport SplitClock from './SplitClock';\r\nimport './App.css';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <SplitClock />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport { render } from 'react-dom';\nimport { enable } from './nosleep';\nimport App from './components/App';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './store';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport persistState from 'redux-localstorage';\nimport thunk from 'redux-thunk';\nimport { Provider as StoreProvider } from 'react-redux';\nimport registerServiceWorker from './register-service-worker';\nimport './styles.css';\n\nconst store = createStore(rootReducer, composeWithDevTools(\n  applyMiddleware(thunk),\n  persistState() as any,\n));\n\nrender(\n  <StoreProvider store={store}>\n    <App />\n  </StoreProvider>,\n  document.getElementById('root')\n);\n\nenable();\n\nregisterServiceWorker();\n"],"sourceRoot":""}